#include <stdio.h>
#include <stdlib.h> // Include this header for system() function
 
int main() // Change void main() to int main()
{
    int pno, rno, i, j, prc, count, t, total;
    count = 0;
    // system("clear"); // Use this for Unix-like systems
    // system("cls");   // Use this for Windows systems
 
    printf("\n Enter number of process:");
    scanf("%d", &pno);
    printf("\n Enter number of resources:");
    scanf("%d", &rno);
 
    int flag[pno + 1]; // Declare flag array
    int tres[rno + 1]; // Declare tres array
    int max[pno + 1][rno + 1]; // Declare max array
    int allocated[pno + 1][rno + 1]; // Declare allocated array
    int avail[rno + 1]; // Declare avail array
    int work[rno + 1]; // Declare work array
    int need[pno + 1][rno + 1]; // Declare need array
 
    for (i = 1; i <= pno; i++)
    {
        flag[i] = 0;
    }
 
    printf("\n Enter total numbers of each resources:");
    for (i = 1; i <= rno; i++)
        scanf("%d", &tres[i]);
 
    printf("\n Enter Max resources for each process:");
    for (i = 1; i <= pno; i++)
    {
        printf("\n for process %d:", i);
        for (j = 1; j <= rno; j++)
            scanf("%d", &max[i][j]);
    }
 
    printf("\n Enter allocated resources for each process:");
    for (i = 1; i <= pno; i++)
    {
        printf("\n for process %d:", i);
        for (j = 1; j <= rno; j++)
            scanf("%d", &allocated[i][j]);
    }
 
    printf("\n available resources:\n");
    for (j = 1; j <= rno; j++)
    {
        avail[j] = 0;
        total = 0;
        for (i = 1; i <= pno; i++)
        {
            total += allocated[i][j];
        }
        avail[j] = tres[j] - total;
        work[j] = avail[j];
        printf(" %d \t", work[j]);
    }
 
    do
    {
        for (i = 1; i <= pno; i++)
        {
            for (j = 1; j <= rno; j++)
            {
                need[i][j] = max[i][j] - allocated[i][j];
            }
        }
 
        printf("\n Allocated matrix Max need");
        for (i = 1; i <= pno; i++)
        {
            printf("\n");
            for (j = 1; j <= rno; j++)
            {
                printf("%4d", allocated[i][j]);
            }
            printf("|");
            for (j = 1; j <= rno; j++)
            {
                printf("%4d", max[i][j]);
            }
            printf("|");
            for (j = 1; j <= rno; j++)
            {
                printf("%4d", need[i][j]);
            }
        }
 
        prc = 0;
        for (i = 1; i <= pno; i++)
        {
            if (flag[i] == 0)
            {
                prc = i;
                for (j = 1; j <= rno; j++)
                {
                    if (work[j] < need[i][j])
                    {
                        prc = 0;
                        break;
                    }
                }
            }
            if (prc != 0)
                break;
        }
        if (prc != 0)
        {
            printf("\n Process %d completed", i);
            count++;
            printf("\n Available matrix:");
            for (j = 1; j <= rno; j++)
            {
                work[j] += allocated[prc][j];
                allocated[prc][j] = 0;
                max[prc][j] = 0;
                flag[prc] = 1;
                printf(" %d", work[j]);
            }
        }
    } while (count != pno && prc != 0);
 
    if (count == pno)
        printf("\nThe system is in a safe state!!");
    else
        printf("\nThe system is in an unsafe state!!");
 
    // getch(); // getch() is not a standard C function, consider removing it
    return 0; // Add return 0; to indicate successful program completion
}
